#include "Arduino.h"

#if ARDUINO_USB_MODE
#warning This sketch should be used when USB is in OTG mode
void setup(){}
void loop(){}
#else
#include "USB.h"

#if ARDUINO_USB_CDC_ON_BOOT
#define HWSerial Serial0
#define USBSerial Serial
#else
#define HWSerial Serial
USBCDC USBSerial;
#endif

#define RX2_PIN (2) // กำหนดขาต่อ RX VC-02-Kit
#define TX2_PIN (1) // กำหนดขาต่อ TX VC-02-Kit

static void usbEventCallback(void* arg, esp_event_base_t event_base, int32_t event_id, void* event_data){
  if(event_base == ARDUINO_USB_EVENTS){
    arduino_usb_event_data_t * data = (arduino_usb_event_data_t*)event_data;
    switch (event_id){
      case ARDUINO_USB_STARTED_EVENT:
        HWSerial.println("USB PLUGGED");
        break;
      case ARDUINO_USB_STOPPED_EVENT:
        HWSerial.println("USB UNPLUGGED");
        break;
      case ARDUINO_USB_SUSPEND_EVENT:
        HWSerial.printf("USB SUSPENDED: remote_wakeup_en: %u\n", data->suspend.remote_wakeup_en);
        break;
      case ARDUINO_USB_RESUME_EVENT:
        HWSerial.println("USB RESUMED");
        break;
      
      default:
        break;
    }
  } else if(event_base == ARDUINO_USB_CDC_EVENTS){
    arduino_usb_cdc_event_data_t * data = (arduino_usb_cdc_event_data_t*)event_data;
    switch (event_id){
      case ARDUINO_USB_CDC_CONNECTED_EVENT:
        HWSerial.println("CDC CONNECTED");
        break;
      case ARDUINO_USB_CDC_DISCONNECTED_EVENT:
        HWSerial.println("CDC DISCONNECTED");
        break;
      case ARDUINO_USB_CDC_LINE_STATE_EVENT:
        HWSerial.printf("CDC LINE STATE: dtr: %u, rts: %u\n", data->line_state.dtr, data->line_state.rts);
        break;
      case ARDUINO_USB_CDC_LINE_CODING_EVENT:
        HWSerial.printf("CDC LINE CODING: bit_rate: %u, data_bits: %u, stop_bits: %u, parity: %u\n", data->line_coding.bit_rate, data->line_coding.data_bits, data->line_coding.stop_bits, data->line_coding.parity);
        Serial2.updateBaudRate(data->line_coding.bit_rate);
        break;
      case ARDUINO_USB_CDC_RX_EVENT:
        // HWSerial.printf("CDC RX [%u]\n", data->rx.len);
        /*{
            uint8_t buf[data->rx.len];
            size_t len = USBSerial.read(buf, data->rx.len);
            HWSerial.write(buf, len);
        }
        HWSerial.println();*/
        {
            // uint8_t buf[data->rx.len];
            uint8_t * buf = (uint8_t*) malloc(data->rx.len);
            if (buf) {
              size_t len = USBSerial.read(buf, data->rx.len);
              Serial2.write(buf, len);
            } else {
              HWSerial.printf("malloc fail\n");
            }
        }
        break;
       case ARDUINO_USB_CDC_RX_OVERFLOW_EVENT:
        HWSerial.printf("CDC RX Overflow of %d bytes", data->rx_overflow.dropped_bytes);
        break;
     
      default:
        break;
    }
  }
}

void setup() {
  HWSerial.begin(115200);
  HWSerial.setDebugOutput(true);

  Serial2.begin(115200, SERIAL_8N1, RX2_PIN, TX2_PIN);
  
  USB.onEvent(usbEventCallback);
  // USBSerial.onEvent(usbEventCallback);
  USBSerial.onEvent(ARDUINO_USB_CDC_LINE_CODING_EVENT, usbEventCallback);
  
  USBSerial.begin();
  USB.begin();
}

void loop() {
  while(Serial2.available()){
    size_t l = Serial2.available();
    uint8_t b[l];
    l = Serial2.read(b, l);
    USBSerial.write(b, l);
  }
  while (USBSerial.available()) {
    size_t l = USBSerial.available();
    uint8_t b[l];
    l = USBSerial.read(b, l);
    Serial2.write(b, l);
  }
}
#endif /* ARDUINO_USB_MODE */
